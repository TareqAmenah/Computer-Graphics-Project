#version 330 core
out vec4 FragColor;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

uniform sampler2D texture_diffuse1;
uniform vec3 lightColor1;
uniform vec3 lightPos1;
uniform vec3 viewPos;


uniform vec3 lightColor2;
uniform vec3 lightPos2;

void main()
{    
	// ambient
	float ambientStrength = 0.5;
	vec3 ambient = ambientStrength * lightColor1 * lightColor2;

	// diffuse lamp1
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos1 - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor1;

	// diffuse lamp2
    vec3 norm2 = normalize(Normal);
    vec3 lightDir2 = normalize(lightPos2 - FragPos);
    float diff2 = max(dot(norm2, lightDir2), 0.0);
    vec3 diffuse2 = diff2 * lightColor2;

	// specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor1;  
    
	// specular lamp2
    float specularStrength2 = 0.5;
    vec3 viewDir2 = normalize(viewPos - FragPos);
    vec3 reflectDir2 = reflect(-lightDir2, norm2);  
    float spec2 = pow(max(dot(viewDir2, reflectDir2), 0.0), 32);
    vec3 specular2 = specularStrength2 * spec2 * lightColor2;  
    


	vec3 result = (ambient + diffuse + diffuse2 + specular + specular2);
	
    FragColor = texture(texture_diffuse1, TexCoords) * vec4(result, 1.0);
}